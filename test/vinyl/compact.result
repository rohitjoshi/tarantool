test_run = require('test_run').new()
---
...
fiber = require('fiber')
---
...
digest = require('digest')
---
...
space = box.schema.space.create("vinyl", { engine = 'vinyl' })
---
...
_= space:create_index('primary', { parts = { 1, 'unsigned' }, run_count_per_level = 2 })
---
...
function vyinfo() return box.space.vinyl.index.primary:stat() end
---
...
vyinfo().run_count == 0
---
- true
...
-- create the frist run
space:insert({1})
---
- [1]
...
space:replace({1, 2})
---
- [1, 2]
...
space:upsert({1},{{'=', 4, 5}}) -- bad upsert
---
...
require('log').info(string.rep(" ", 1024))
---
...
space:select()
---
- - [1, 2]
...
space:select()
---
- - [1, 2]
...
-- gh-1571: bad upsert should not log on reads
test_run:grep_log('default', 'UPSERT operation failed', 400) == nil
---
- true
...
box.snapshot()
---
- ok
...
vyinfo().run_count == 1
---
- true
...
-- create the second run
space:replace({2,2})
---
- [2, 2]
...
space:upsert({2},{{'=',4,5}}) -- bad upsert
---
...
box.snapshot() -- create the second run
---
- ok
...
vyinfo().run_count == 2
---
- true
...
-- create a few more runs to trigger compaction
space:insert({3, 3})
---
- [3, 3]
...
box.snapshot()
---
- ok
...
-- wait for compaction
while vyinfo().run_count >= 2 do fiber.sleep(0.1) end
---
...
vyinfo().run_count == 1
---
- true
...
-- gh-1571: bad upsert should log on compaction
test_run:grep_log('default', 'UPSERT operation failed') ~= nil
---
- true
...
space:drop()
---
...
--
-- gh-3139: index.compact forces major compaction for all ranges
--
s = box.schema.space.create('test', {engine = 'vinyl'})
---
...
_ = s:create_index('pk', {run_count_per_level = 100, page_size = 128, range_size = 1024})
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function dump()
    for i = 1, 10 do
        s:replace{i, digest.urandom(1000)}
    end
    box.snapshot()
end;
---
...
function info()
    local info = s.index.pk:stat()
    return {range_count = info.range_count, run_count = info.run_count}
end
function compact()
    s.index.pk:compact()
    repeat
        fiber.sleep(0.001)
        local info = s.index.pk:stat()
    until info.range_count == info.run_count
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
dump()
---
...
dump()
---
...
dump()
---
...
info() -- 1 range, 3 runs
---
- run_count: 3
  range_count: 1
...
compact()
---
...
info() -- 1 range, 1 run
---
- run_count: 1
  range_count: 1
...
compact() -- no-op
---
...
dump()
---
...
dump()
---
...
dump()
---
...
info() -- 1 range, 4 runs
---
- run_count: 4
  range_count: 1
...
compact()
---
...
info() -- 2 ranges, 2 runs
---
- run_count: 2
  range_count: 2
...
compact() -- no-op
---
...
dump()
---
...
dump()
---
...
dump()
---
...
info() -- 2 ranges, 5 runs
---
- run_count: 5
  range_count: 2
...
compact()
---
...
info() -- 4 ranges, 4 runs
---
- run_count: 4
  range_count: 4
...
s:drop()
---
...
